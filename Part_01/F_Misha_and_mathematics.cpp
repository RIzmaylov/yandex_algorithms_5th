/*
Миша сидел на занятиях математики в Высшей школе экономики и решал следующую задачу: дано n целых чисел и нужно расставить между ними знаки + и ×
 так, чтобы результат полученного арифметического выражения был нечётным (например, между числами 5, 7, 2, можно расставить арифметические знаки следующим образом: 
5×7+2=37). Так как примеры становились все больше и больше, а Миша срочно убегает в гости, от вас требуется написать программу решающую данную задачу.
Формат ввода
В первой строке содержится единственное число n (2≤n≤105). Во второй строке содержится n целых чисел ai, разделённых пробелами (−109≤ai≤109). 
Гарантируется, что решение существует.
Формат вывода
В одной строке выведите n−1 символ + или ×, в результате применения которых получается нечётный результат. 
(Для вывода используйте соответственно знаки «+» (ASCII код—43) и «x» (ASCII код—120), без кавычек).
Пример 1
Ввод	            Вывод
3                   x+
5 7 2

Пример 2
Ввод	            Вывод
2                   +
4 -5

*/

#include <iostream>
#include <vector>
#include <cstdint>

using namespace std;

string BuildExpr(const vector<int64_t>& nums) {
    string result;
    int temp = 0;
    bool flag = true;
    for (int i = 1; i < nums.size(); ++i) {
        if (flag) {
            if ((nums[i - 1] + nums[i]) % 2 == 0) {
                result += 120;  //'x'
                temp = (nums[i - 1] * nums[i]) % 10;
            } else {
                result += 43;  //'+'
                temp = (nums[i - 1] + nums[i]) % 10;
            }
            flag = false;
        }
        else if ((temp + nums[i]) % 2 == 0) {
            result += 120;  //'x'
            temp = (nums[i] * temp) % 10;
        } else {
            result += 43;  //'+'
            temp = (nums[i] + temp) % 10;
        }
    }
    return result;
}

int main()
{
    int n;
    cin >> n;
    vector<int64_t> nums;
    while (n--) {
        int64_t num;
        cin >> num;
        nums.push_back(num);
    }
    cout << BuildExpr(nums) << '\n';
    return 0;
}
